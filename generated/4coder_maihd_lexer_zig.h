#if !defined(FCODER_LEX_GEN_HAND_WRITTEN_TYPES)
#define FCODER_LEX_GEN_HAND_WRITTEN_TYPES

struct Lexeme_Table_Value{
    Token_Base_Kind base_kind;
    u16 sub_kind;
};

struct Lexeme_Table_Lookup{
    b32 found_match;
    Token_Base_Kind base_kind;
    u16 sub_kind;
};

#endif
typedef u16 Token_Zig_Kind;
enum{
TokenZigKind_EOF = 0,
TokenZigKind_Whitespace = 1,
TokenZigKind_LexError = 2,
TokenZigKind_BlockComment = 3,
TokenZigKind_LineComment = 4,
TokenZigKind_Backslash = 5,
TokenZigKind_LiteralInteger = 6,
TokenZigKind_LiteralIntegerU = 7,
TokenZigKind_LiteralIntegerL = 8,
TokenZigKind_LiteralIntegerUL = 9,
TokenZigKind_LiteralIntegerLL = 10,
TokenZigKind_LiteralIntegerULL = 11,
TokenZigKind_LiteralIntegerHex = 12,
TokenZigKind_LiteralIntegerHexU = 13,
TokenZigKind_LiteralIntegerHexL = 14,
TokenZigKind_LiteralIntegerHexUL = 15,
TokenZigKind_LiteralIntegerHexLL = 16,
TokenZigKind_LiteralIntegerHexULL = 17,
TokenZigKind_LiteralIntegerOct = 18,
TokenZigKind_LiteralIntegerOctU = 19,
TokenZigKind_LiteralIntegerOctL = 20,
TokenZigKind_LiteralIntegerOctUL = 21,
TokenZigKind_LiteralIntegerOctLL = 22,
TokenZigKind_LiteralIntegerOctULL = 23,
TokenZigKind_LiteralFloat32 = 24,
TokenZigKind_LiteralFloat64 = 25,
TokenZigKind_LiteralString = 26,
TokenZigKind_LiteralStringWide = 27,
TokenZigKind_LiteralStringUTF8 = 28,
TokenZigKind_LiteralStringUTF16 = 29,
TokenZigKind_LiteralStringUTF32 = 30,
TokenZigKind_LiteralStringRaw = 31,
TokenZigKind_LiteralStringWideRaw = 32,
TokenZigKind_LiteralStringUTF8Raw = 33,
TokenZigKind_LiteralStringUTF16Raw = 34,
TokenZigKind_LiteralStringUTF32Raw = 35,
TokenZigKind_LiteralCharacter = 36,
TokenZigKind_LiteralCharacterWide = 37,
TokenZigKind_LiteralCharacterUTF8 = 38,
TokenZigKind_LiteralCharacterUTF16 = 39,
TokenZigKind_LiteralCharacterUTF32 = 40,
TokenZigKind_PPIncludeFile = 41,
TokenZigKind_PPErrorMessage = 42,
TokenZigKind_KeywordGeneric = 43,
TokenZigKind_BraceOp = 44,
TokenZigKind_BraceCl = 45,
TokenZigKind_ParenOp = 46,
TokenZigKind_BrackOp = 47,
TokenZigKind_ParenCl = 48,
TokenZigKind_BrackCl = 49,
TokenZigKind_Semicolon = 50,
TokenZigKind_Colon = 51,
TokenZigKind_DotDotDot = 52,
TokenZigKind_ColonColon = 53,
TokenZigKind_PlusPlus = 54,
TokenZigKind_MinusMinus = 55,
TokenZigKind_Dot = 56,
TokenZigKind_Arrow = 57,
TokenZigKind_Plus = 58,
TokenZigKind_Minus = 59,
TokenZigKind_Not = 60,
TokenZigKind_Tilde = 61,
TokenZigKind_Star = 62,
TokenZigKind_And = 63,
TokenZigKind_DotStar = 64,
TokenZigKind_ArrowStar = 65,
TokenZigKind_Div = 66,
TokenZigKind_Mod = 67,
TokenZigKind_LeftLeft = 68,
TokenZigKind_RightRight = 69,
TokenZigKind_Compare = 70,
TokenZigKind_Less = 71,
TokenZigKind_LessEq = 72,
TokenZigKind_Grtr = 73,
TokenZigKind_GrtrEq = 74,
TokenZigKind_EqEq = 75,
TokenZigKind_NotEq = 76,
TokenZigKind_Xor = 77,
TokenZigKind_Or = 78,
TokenZigKind_AndAnd = 79,
TokenZigKind_OrOr = 80,
TokenZigKind_Ternary = 81,
TokenZigKind_Eq = 82,
TokenZigKind_PlusEq = 83,
TokenZigKind_MinusEq = 84,
TokenZigKind_StarEq = 85,
TokenZigKind_DivEq = 86,
TokenZigKind_ModEq = 87,
TokenZigKind_LeftLeftEq = 88,
TokenZigKind_RightRightEq = 89,
TokenZigKind_Comma = 90,
TokenZigKind_PPStringify = 91,
TokenZigKind_PPConcat = 92,
TokenZigKind_Fn = 93,
TokenZigKind_Comptime = 94,
TokenZigKind_Void = 95,
TokenZigKind_Bool = 96,
TokenZigKind_Char = 97,
TokenZigKind_I8 = 98,
TokenZigKind_I16 = 99,
TokenZigKind_I32 = 100,
TokenZigKind_I64 = 101,
TokenZigKind_I128 = 102,
TokenZigKind_Isize = 103,
TokenZigKind_U8 = 104,
TokenZigKind_U16 = 105,
TokenZigKind_U32 = 106,
TokenZigKind_U64 = 107,
TokenZigKind_U128 = 108,
TokenZigKind_Usize = 109,
TokenZigKind_F16 = 110,
TokenZigKind_F32 = 111,
TokenZigKind_F64 = 112,
TokenZigKind_F80 = 113,
TokenZigKind_F128 = 114,
TokenZigKind_C_int = 115,
TokenZigKind_C_uint = 116,
TokenZigKind_C_char = 117,
TokenZigKind_C_long = 118,
TokenZigKind_C_ulong = 119,
TokenZigKind_C_short = 120,
TokenZigKind_C_ushort = 121,
TokenZigKind_C_longlong = 122,
TokenZigKind_C_ulonglong = 123,
TokenZigKind_C_longdouble = 124,
TokenZigKind_Comptime_int = 125,
TokenZigKind_Comptime_float = 126,
TokenZigKind_Const = 127,
TokenZigKind_Break = 128,
TokenZigKind_Defer = 129,
TokenZigKind_ErrDefer = 130,
TokenZigKind_Continue = 131,
TokenZigKind_Unreachable = 132,
TokenZigKind_Do = 133,
TokenZigKind_Else = 134,
TokenZigKind_For = 135,
TokenZigKind_Goto = 136,
TokenZigKind_If = 137,
TokenZigKind_Return = 138,
TokenZigKind_Switch = 139,
TokenZigKind_Try = 140,
TokenZigKind_While = 141,
TokenZigKind_Class = 142,
TokenZigKind_Enum = 143,
TokenZigKind_Struct = 144,
TokenZigKind_Union = 145,
TokenZigKind_Opaque = 146,
TokenZigKind_UsingNamespace = 147,
TokenZigKind_Pub = 148,
TokenZigKind_Extern = 149,
TokenZigKind_Export = 150,
TokenZigKind_Inline = 151,
TokenZigKind_Static = 152,
TokenZigKind_AlignAs = 153,
TokenZigKind_Null = 154,
TokenZigKind_ThreadLocal = 155,
TokenZigKind_AlignOf = 156,
TokenZigKind_NoReturn = 157,
TokenZigKind_Type = 158,
TokenZigKind_AnyType = 159,
TokenZigKind_AnyError = 160,
TokenZigKind_AnyOpaque = 161,
TokenZigKind_LiteralTrue = 162,
TokenZigKind_LiteralFalse = 163,
TokenZigKind_Identifier = 164,
TokenZigKind_PPInclude = 165,
TokenZigKind_PPVersion = 166,
TokenZigKind_PPDefine = 167,
TokenZigKind_PPUndef = 168,
TokenZigKind_PPIf = 169,
TokenZigKind_PPIfDef = 170,
TokenZigKind_PPIfNDef = 171,
TokenZigKind_PPElse = 172,
TokenZigKind_PPElIf = 173,
TokenZigKind_PPEndIf = 174,
TokenZigKind_PPError = 175,
TokenZigKind_PPImport = 176,
TokenZigKind_PPUsing = 177,
TokenZigKind_PPLine = 178,
TokenZigKind_PPPragma = 179,
TokenZigKind_PPUnknown = 180,
TokenZigKind_PPDefined = 181,
TokenZigKind_COUNT = 182,
};
char *token_zig_kind_names[] = {
"EOF",
"Whitespace",
"LexError",
"BlockComment",
"LineComment",
"Backslash",
"LiteralInteger",
"LiteralIntegerU",
"LiteralIntegerL",
"LiteralIntegerUL",
"LiteralIntegerLL",
"LiteralIntegerULL",
"LiteralIntegerHex",
"LiteralIntegerHexU",
"LiteralIntegerHexL",
"LiteralIntegerHexUL",
"LiteralIntegerHexLL",
"LiteralIntegerHexULL",
"LiteralIntegerOct",
"LiteralIntegerOctU",
"LiteralIntegerOctL",
"LiteralIntegerOctUL",
"LiteralIntegerOctLL",
"LiteralIntegerOctULL",
"LiteralFloat32",
"LiteralFloat64",
"LiteralString",
"LiteralStringWide",
"LiteralStringUTF8",
"LiteralStringUTF16",
"LiteralStringUTF32",
"LiteralStringRaw",
"LiteralStringWideRaw",
"LiteralStringUTF8Raw",
"LiteralStringUTF16Raw",
"LiteralStringUTF32Raw",
"LiteralCharacter",
"LiteralCharacterWide",
"LiteralCharacterUTF8",
"LiteralCharacterUTF16",
"LiteralCharacterUTF32",
"PPIncludeFile",
"PPErrorMessage",
"KeywordGeneric",
"BraceOp",
"BraceCl",
"ParenOp",
"BrackOp",
"ParenCl",
"BrackCl",
"Semicolon",
"Colon",
"DotDotDot",
"ColonColon",
"PlusPlus",
"MinusMinus",
"Dot",
"Arrow",
"Plus",
"Minus",
"Not",
"Tilde",
"Star",
"And",
"DotStar",
"ArrowStar",
"Div",
"Mod",
"LeftLeft",
"RightRight",
"Compare",
"Less",
"LessEq",
"Grtr",
"GrtrEq",
"EqEq",
"NotEq",
"Xor",
"Or",
"AndAnd",
"OrOr",
"Ternary",
"Eq",
"PlusEq",
"MinusEq",
"StarEq",
"DivEq",
"ModEq",
"LeftLeftEq",
"RightRightEq",
"Comma",
"PPStringify",
"PPConcat",
"Fn",
"Comptime",
"Void",
"Bool",
"Char",
"I8",
"I16",
"I32",
"I64",
"I128",
"Isize",
"U8",
"U16",
"U32",
"U64",
"U128",
"Usize",
"F16",
"F32",
"F64",
"F80",
"F128",
"C_int",
"C_uint",
"C_char",
"C_long",
"C_ulong",
"C_short",
"C_ushort",
"C_longlong",
"C_ulonglong",
"C_longdouble",
"Comptime_int",
"Comptime_float",
"Const",
"Break",
"Defer",
"ErrDefer",
"Continue",
"Unreachable",
"Do",
"Else",
"For",
"Goto",
"If",
"Return",
"Switch",
"Try",
"While",
"Class",
"Enum",
"Struct",
"Union",
"Opaque",
"UsingNamespace",
"Pub",
"Extern",
"Export",
"Inline",
"Static",
"AlignAs",
"Null",
"ThreadLocal",
"AlignOf",
"NoReturn",
"Type",
"AnyType",
"AnyError",
"AnyOpaque",
"LiteralTrue",
"LiteralFalse",
"Identifier",
"PPInclude",
"PPVersion",
"PPDefine",
"PPUndef",
"PPIf",
"PPIfDef",
"PPIfNDef",
"PPElse",
"PPElIf",
"PPEndIf",
"PPError",
"PPImport",
"PPUsing",
"PPLine",
"PPPragma",
"PPUnknown",
"PPDefined",
};
