#if !defined(FCODER_LEX_GEN_HAND_WRITTEN_TYPES)
#define FCODER_LEX_GEN_HAND_WRITTEN_TYPES

struct Lexeme_Table_Value{
    Token_Base_Kind base_kind;
    u16 sub_kind;
};

struct Lexeme_Table_Lookup{
    b32 found_match;
    Token_Base_Kind base_kind;
    u16 sub_kind;
};

#endif
typedef u16 Token_C#_Kind;
enum{
TokenC#Kind_EOF = 0,
TokenC#Kind_Whitespace = 1,
TokenC#Kind_LexError = 2,
TokenC#Kind_BlockComment = 3,
TokenC#Kind_LineComment = 4,
TokenC#Kind_Backslash = 5,
TokenC#Kind_LiteralInteger = 6,
TokenC#Kind_LiteralIntegerU = 7,
TokenC#Kind_LiteralIntegerL = 8,
TokenC#Kind_LiteralIntegerUL = 9,
TokenC#Kind_LiteralIntegerLL = 10,
TokenC#Kind_LiteralIntegerULL = 11,
TokenC#Kind_LiteralIntegerHex = 12,
TokenC#Kind_LiteralIntegerHexU = 13,
TokenC#Kind_LiteralIntegerHexL = 14,
TokenC#Kind_LiteralIntegerHexUL = 15,
TokenC#Kind_LiteralIntegerHexLL = 16,
TokenC#Kind_LiteralIntegerHexULL = 17,
TokenC#Kind_LiteralIntegerOct = 18,
TokenC#Kind_LiteralIntegerOctU = 19,
TokenC#Kind_LiteralIntegerOctL = 20,
TokenC#Kind_LiteralIntegerOctUL = 21,
TokenC#Kind_LiteralIntegerOctLL = 22,
TokenC#Kind_LiteralIntegerOctULL = 23,
TokenC#Kind_LiteralFloat32 = 24,
TokenC#Kind_LiteralFloat64 = 25,
TokenC#Kind_LiteralString = 26,
TokenC#Kind_LiteralStringWide = 27,
TokenC#Kind_LiteralStringUTF8 = 28,
TokenC#Kind_LiteralStringUTF16 = 29,
TokenC#Kind_LiteralStringUTF32 = 30,
TokenC#Kind_LiteralStringRaw = 31,
TokenC#Kind_LiteralStringWideRaw = 32,
TokenC#Kind_LiteralStringUTF8Raw = 33,
TokenC#Kind_LiteralStringUTF16Raw = 34,
TokenC#Kind_LiteralStringUTF32Raw = 35,
TokenC#Kind_LiteralCharacter = 36,
TokenC#Kind_LiteralCharacterWide = 37,
TokenC#Kind_LiteralCharacterUTF8 = 38,
TokenC#Kind_LiteralCharacterUTF16 = 39,
TokenC#Kind_LiteralCharacterUTF32 = 40,
TokenC#Kind_PPIncludeFile = 41,
TokenC#Kind_PPErrorMessage = 42,
TokenC#Kind_KeywordGeneric = 43,
TokenC#Kind_BraceOp = 44,
TokenC#Kind_BraceCl = 45,
TokenC#Kind_ParenOp = 46,
TokenC#Kind_BrackOp = 47,
TokenC#Kind_ParenCl = 48,
TokenC#Kind_BrackCl = 49,
TokenC#Kind_Semicolon = 50,
TokenC#Kind_DotDotDot = 51,
TokenC#Kind_Colon = 52,
TokenC#Kind_ColonColon = 53,
TokenC#Kind_ColonEq = 54,
TokenC#Kind_Dot = 55,
TokenC#Kind_Plus = 56,
TokenC#Kind_Minus = 57,
TokenC#Kind_Not = 58,
TokenC#Kind_Tilde = 59,
TokenC#Kind_Star = 60,
TokenC#Kind_And = 61,
TokenC#Kind_DotStar = 62,
TokenC#Kind_Div = 63,
TokenC#Kind_Mod = 64,
TokenC#Kind_MinusGrtr = 65,
TokenC#Kind_EqGrtr = 66,
TokenC#Kind_DotDot = 67,
TokenC#Kind_LeftLeft = 68,
TokenC#Kind_RightRight = 69,
TokenC#Kind_Less = 70,
TokenC#Kind_LessEq = 71,
TokenC#Kind_Grtr = 72,
TokenC#Kind_GrtrEq = 73,
TokenC#Kind_EqEq = 74,
TokenC#Kind_NotEq = 75,
TokenC#Kind_Xor = 76,
TokenC#Kind_Or = 77,
TokenC#Kind_AndAnd = 78,
TokenC#Kind_OrOr = 79,
TokenC#Kind_Ternary = 80,
TokenC#Kind_Eq = 81,
TokenC#Kind_PlusEq = 82,
TokenC#Kind_MinusEq = 83,
TokenC#Kind_StarEq = 84,
TokenC#Kind_DivEq = 85,
TokenC#Kind_ModEq = 86,
TokenC#Kind_LeftLeftEq = 87,
TokenC#Kind_RightRightEq = 88,
TokenC#Kind_Comma = 89,
TokenC#Kind_AlignOf = 90,
TokenC#Kind_Operator = 91,
TokenC#Kind_Null = 92,
TokenC#Kind_Inline = 93,
TokenC#Kind_Using = 94,
TokenC#Kind_Any = 95,
TokenC#Kind_Void = 96,
TokenC#Kind_String = 97,
TokenC#Kind_Bool = 98,
TokenC#Kind_Float = 99,
TokenC#Kind_Float32 = 100,
TokenC#Kind_Float64 = 101,
TokenC#Kind_Int = 102,
TokenC#Kind_U8 = 103,
TokenC#Kind_U16 = 104,
TokenC#Kind_U32 = 105,
TokenC#Kind_U64 = 106,
TokenC#Kind_S8 = 107,
TokenC#Kind_S16 = 108,
TokenC#Kind_S32 = 109,
TokenC#Kind_S64 = 110,
TokenC#Kind_Struct = 111,
TokenC#Kind_Union = 112,
TokenC#Kind_Enum = 113,
TokenC#Kind_SizeOf = 114,
TokenC#Kind_New = 115,
TokenC#Kind_Delete = 116,
TokenC#Kind_Defer = 117,
TokenC#Kind_Autocast = 118,
TokenC#Kind_Remove = 119,
TokenC#Kind_PushContext = 120,
TokenC#Kind_Uninitialized = 121,
TokenC#Kind_It = 122,
TokenC#Kind_ItIndex = 123,
TokenC#Kind_Context = 124,
TokenC#Kind_Break = 125,
TokenC#Kind_Case = 126,
TokenC#Kind_Continue = 127,
TokenC#Kind_Default = 128,
TokenC#Kind_Do = 129,
TokenC#Kind_Else = 130,
TokenC#Kind_For = 131,
TokenC#Kind_Goto = 132,
TokenC#Kind_If = 133,
TokenC#Kind_Return = 134,
TokenC#Kind_Switch = 135,
TokenC#Kind_While = 136,
TokenC#Kind_Cast = 137,
TokenC#Kind_LiteralTrue = 138,
TokenC#Kind_LiteralFalse = 139,
TokenC#Kind_Identifier = 140,
TokenC#Kind_PPInclude = 141,
TokenC#Kind_PPVersion = 142,
TokenC#Kind_PPDefine = 143,
TokenC#Kind_PPUndef = 144,
TokenC#Kind_PPIfDef = 145,
TokenC#Kind_PPIfNDef = 146,
TokenC#Kind_PPElse = 147,
TokenC#Kind_PPElIf = 148,
TokenC#Kind_PPEndIf = 149,
TokenC#Kind_PPError = 150,
TokenC#Kind_PPUsing = 151,
TokenC#Kind_PPLine = 152,
TokenC#Kind_PPIf = 153,
TokenC#Kind_PPImport = 154,
TokenC#Kind_PPPragma = 155,
TokenC#Kind_PPLoad = 156,
TokenC#Kind_PPUnknown = 157,
TokenC#Kind_PPDefined = 158,
TokenC#Kind_COUNT = 159,
};
char *token_cs_kind_names[] = {
"EOF",
"Whitespace",
"LexError",
"BlockComment",
"LineComment",
"Backslash",
"LiteralInteger",
"LiteralIntegerU",
"LiteralIntegerL",
"LiteralIntegerUL",
"LiteralIntegerLL",
"LiteralIntegerULL",
"LiteralIntegerHex",
"LiteralIntegerHexU",
"LiteralIntegerHexL",
"LiteralIntegerHexUL",
"LiteralIntegerHexLL",
"LiteralIntegerHexULL",
"LiteralIntegerOct",
"LiteralIntegerOctU",
"LiteralIntegerOctL",
"LiteralIntegerOctUL",
"LiteralIntegerOctLL",
"LiteralIntegerOctULL",
"LiteralFloat32",
"LiteralFloat64",
"LiteralString",
"LiteralStringWide",
"LiteralStringUTF8",
"LiteralStringUTF16",
"LiteralStringUTF32",
"LiteralStringRaw",
"LiteralStringWideRaw",
"LiteralStringUTF8Raw",
"LiteralStringUTF16Raw",
"LiteralStringUTF32Raw",
"LiteralCharacter",
"LiteralCharacterWide",
"LiteralCharacterUTF8",
"LiteralCharacterUTF16",
"LiteralCharacterUTF32",
"PPIncludeFile",
"PPErrorMessage",
"KeywordGeneric",
"BraceOp",
"BraceCl",
"ParenOp",
"BrackOp",
"ParenCl",
"BrackCl",
"Semicolon",
"DotDotDot",
"Colon",
"ColonColon",
"ColonEq",
"Dot",
"Plus",
"Minus",
"Not",
"Tilde",
"Star",
"And",
"DotStar",
"Div",
"Mod",
"MinusGrtr",
"EqGrtr",
"DotDot",
"LeftLeft",
"RightRight",
"Less",
"LessEq",
"Grtr",
"GrtrEq",
"EqEq",
"NotEq",
"Xor",
"Or",
"AndAnd",
"OrOr",
"Ternary",
"Eq",
"PlusEq",
"MinusEq",
"StarEq",
"DivEq",
"ModEq",
"LeftLeftEq",
"RightRightEq",
"Comma",
"AlignOf",
"Operator",
"Null",
"Inline",
"Using",
"Any",
"Void",
"String",
"Bool",
"Float",
"Float32",
"Float64",
"Int",
"U8",
"U16",
"U32",
"U64",
"S8",
"S16",
"S32",
"S64",
"Struct",
"Union",
"Enum",
"SizeOf",
"New",
"Delete",
"Defer",
"Autocast",
"Remove",
"PushContext",
"Uninitialized",
"It",
"ItIndex",
"Context",
"Break",
"Case",
"Continue",
"Default",
"Do",
"Else",
"For",
"Goto",
"If",
"Return",
"Switch",
"While",
"Cast",
"LiteralTrue",
"LiteralFalse",
"Identifier",
"PPInclude",
"PPVersion",
"PPDefine",
"PPUndef",
"PPIfDef",
"PPIfNDef",
"PPElse",
"PPElIf",
"PPEndIf",
"PPError",
"PPUsing",
"PPLine",
"PPIf",
"PPImport",
"PPPragma",
"PPLoad",
"PPUnknown",
"PPDefined",
};
